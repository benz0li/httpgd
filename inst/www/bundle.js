(()=>{"use strict";var t={474:(t,e,i)=>{t.exports=i.p+"103f47f4ae284eb62b37.svg"}},e={};function i(o){var n=e[o];if(void 0!==n)return n.exports;var r=e[o]={exports:{}};return t[o](r,r.exports,i),r.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t="http://";function e(t){var e=new Headers;return t.token&&e.set("X-HTTPGD-TOKEN",this.token),e}function o(t,i){return o=this,n=void 0,s=function(){return function(t,e){var i,o,n,r,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(n=2&r[0]?o.return:r[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,r[1])).done)return n;switch(o=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){s.label=r[1];break}if(6===r[0]&&s.label<n[1]){s.label=n[1],n=r;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(r);break}n[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(o){switch(o.label){case 0:return[4,fetch(i,{headers:e(t)})];case 1:return[4,o.sent().json()];case 2:return[2,o.sent()]}}))},new((r=void 0)||(r=Promise))((function(t,e){function i(t){try{h(s.next(t))}catch(t){e(t)}}function a(t){try{h(s.throw(t))}catch(t){e(t)}}function h(e){var o;e.done?t(e.value):(o=e.value,o instanceof r?o:new r((function(t){t(o)}))).then(i,a)}h((s=s.apply(o,n||[])).next())}));var o,n,r,s}function n(t){var e=document.getElementById(t);if(!e)throw new ReferenceError(t+" is not defined");return e}function r(t,e,i){var o=document.createElement("a");o.href=t,e&&(o.download=e),i&&(o.target="_blank"),document.body.appendChild(o),o.click(),document.body.removeChild(o)}function s(t,e){var i=document.createElement("canvas");document.body.appendChild(i);var o=t.getBoundingClientRect();i.width=o.width,i.height=o.height;var n=i.getContext("2d");n&&(n.drawImage(t,0,0,i.width,i.height),e(i),document.body.removeChild(i))}var a=function(){function t(){this.fun=[]}return t.prototype.notify=function(t){for(var e=0;e<this.fun.length;++e)this.fun[e](t,this.oldState);this.oldState=t},t.prototype.subscribe=function(t){this.fun.push(t)},t}();function h(t,e,i){var o=t.value;if(!o.match(/^\d+$/))return!1;var n=parseInt(o);return n>=e&&n<=i}function c(t,e,i){return e?t.classList.add(i):t.classList.remove(i),e}var l=function(){function e(t,e){this.mode=0,this.pausePoll=!1,this.disconnected=!1,this.remoteStateChanged=new a,this.connectionChanged=new a,this.backend=t,this.allowWebsockets=e||!1}return e.prototype.open=function(){0==this.mode&&this.start(3)},e.prototype.close=function(){0!=this.mode&&this.start(0)},e.prototype.start=function(t){var i,o=this;if(this.mode!=t)switch(t){case 1:this.clearWebsocket(),this.clearPoll(),this.pollHandle=setInterval((function(){return o.poll()}),e.INTERVAL_POLL),this.mode=t;break;case 2:this.clearWebsocket(),this.clearPoll(),this.pollHandle=setInterval((function(){return o.poll()}),e.INTERVAL_POLL_SLOW),this.mode=t;break;case 3:if(!this.allowWebsockets){this.start(1);break}this.clearPoll(),this.clearWebsocket(),this.socket=(i=this.backend,new WebSocket(function(t){return"ws://"+t.host}(i))),this.socket.onmessage=function(t){return o.onWsMessage(t.data)},this.socket.onopen=function(){return o.onWsOpen()},this.socket.onclose=function(){return o.onWsClose()},this.socket.onerror=function(){return o.start(2)},this.mode=t,this.poll();break;case 0:this.clearWebsocket(),this.clearPoll(),this.mode=t}},e.prototype.clearPoll=function(){this.pollHandle&&clearInterval(this.pollHandle)},e.prototype.clearWebsocket=function(){this.socket&&(this.socket.onclose=function(){},this.socket.close())},e.prototype.poll=function(){var e,i=this;this.pausePoll||(e=this.backend,o(e,function(e){return t+e.host+"/state"}(e))).catch((function(t){throw t})).then((function(t){i.setDisconnected(!1),2===i.mode&&i.start(3),i.pausePoll||i.checkState(t)})).catch((function(){i.setDisconnected(!0),2!==i.mode&&i.start(2)}))},e.prototype.onWsMessage=function(t){if(t.startsWith("{")){var e=JSON.parse(t);this.checkState(e)}else console.log("Unknown WS message: "+t)},e.prototype.onWsClose=function(){this.setDisconnected(!0)},e.prototype.onWsOpen=function(){this.setDisconnected(!1)},e.prototype.setDisconnected=function(t){this.disconnected!=t&&(this.disconnected=t,this.disconnected?this.start(2):this.start(3),this.connectionChanged.notify(t))},e.prototype.checkState=function(t){this.lastState&&this.lastState.active===t.active&&this.lastState.hsize===t.hsize&&this.lastState.upid===t.upid||(this.lastState=t,this.remoteStateChanged.notify(t))},e.prototype.onRemoteChange=function(t){this.remoteStateChanged.subscribe(t)},e.prototype.onConnectionChange=function(t){this.connectionChanged.subscribe(t)},e.INTERVAL_POLL=500,e.INTERVAL_POLL_SLOW=15e3,e}(),d=function(){function e(t,e,i){var o=this;this.plotsChanged=new a,this.deviceActiveChanged=new a,this.data={renderers:null,plots:null},this.backend={host:t,token:e},this.connection=new l(this.backend,i),this.connection.onRemoteChange((function(t,e){return o.remoteStateChanged(t,e)}))}return e.prototype.connect=function(){return this.connection.open(),this.updateRenderers()},e.prototype.onConnectionChange=function(t){this.connection.onConnectionChange(t)},e.prototype.remoteStateChanged=function(t,e){e&&e.hsize===t.hsize&&e.upid===t.upid||this.updatePlots(),e&&e.active==t.active||this.deviceActiveChanged.notify(t.active)},e.prototype.updateRenderers=function(){var e,i=this;return(e=this.backend,o(e,function(e){return t+e.host+"/renderers"}(e))).then((function(t){i.data.renderers=t}))},e.prototype.updatePlots=function(){var e,i=this;(e=this.backend,o(e,function(e){return t+e.host+"/plots"}(e))).then((function(t){i.data.plots=t,i.plotsChanged.notify(t)}))},e.prototype.getPlots=function(){return this.data.plots.plots},e.prototype.getRenderers=function(){return this.data.renderers.renderers},e.prototype.getPlotURL=function(e){return function(e,i,o,n){var r=new URL(t+e.host+"/plot");return i.id&&r.searchParams.append("id",i.id),i.renderer&&r.searchParams.append("renderer",i.renderer),i.width&&r.searchParams.append("width",Math.round(i.width).toString()),i.height&&r.searchParams.append("height",Math.round(i.height).toString()),i.zoom&&r.searchParams.append("zoom",i.zoom.toString()),i.download&&r.searchParams.append("download",i.download),o&&e.token&&r.searchParams.append("token",e.token),n&&r.searchParams.append("c",n),r.href}(this.backend,e,!0,this.data.plots.state.upid.toString())},e.prototype.onPlotsChanged=function(t){this.plotsChanged.subscribe(t)},e.prototype.onDeviceActiveChanged=function(t){this.deviceActiveChanged.subscribe(t)},e.prototype.removePlot=function(e){!function(e,i){o(e,function(e,i){var o=new URL(t+e.host+"/remove");return o.searchParams.append("id",i.id),o.href}(e,i))}(this.backend,e)},e.prototype.clearPlots=function(){var e;o(e=this.backend,function(e){return t+e.host+"/clear"}(e))},e}(),u=i(474),p=function(){function t(t){var e=this;this.viewer=t,this.elemModal=n("exp-modal"),this.imgPreview=n("exp-image"),this.inputWidth=n("ie-width"),this.inputHeight=n("ie-height"),this.inputZoom=n("ie-scale"),this.btnOpen=n("ie-btn-open"),this.btnDownload=n("ie-btn-download"),this.selectFormat=n("ie-format"),this.btnClose=n("exp-modal-close"),this.btnClose.onclick=function(){return e.hide()},window.onmousedown=function(t){t.target==e.elemModal&&e.hide()},this.inputWidth.addEventListener("input",(function(){return e.update()})),this.inputHeight.addEventListener("input",(function(){return e.update()})),this.inputZoom.addEventListener("input",(function(){return e.update()})),this.btnDownload.onclick=function(){return e.clickDownload()},this.btnOpen.onclick=function(){return e.clickOpen()}}return t.prototype.initRenderers=function(){var t=this;this.renderers=this.viewer.httpgd.getRenderers(),this.renderers.sort((function(t,e){return function(t,e){return t<e?-1:t>e?1:0}(t.name,e.name)})).forEach((function(e){var i=document.createElement("option");i.value=e.id,i.text=e.name+" (*"+e.ext+")",t.selectFormat.add(i)})),this.selectFormat.value="svg"},t.prototype.hide=function(){this.elemModal.style.display="none"},t.prototype.isVisible=function(){return this.elemModal.style.display&&"none"!==this.elemModal.style.display},t.prototype.validWidth=function(){return h(this.inputWidth,t.MIN_PREVIEW_SIZE,t.MAX_PREVIEW_SIZE)},t.prototype.getWidth=function(){return Math.min(parseInt(this.inputWidth.value),t.MAX_PREVIEW_SIZE)},t.prototype.validHeight=function(){return h(this.inputHeight,t.MIN_PREVIEW_SIZE,t.MAX_PREVIEW_SIZE)},t.prototype.getHeight=function(){return Math.min(parseInt(this.inputHeight.value),t.MAX_PREVIEW_SIZE)},t.prototype.validZoom=function(){return h(this.inputZoom,t.MIN_PREVIEW_ZOOM,t.MAX_PREVIEW_ZOOM)},t.prototype.getZoom=function(){return Math.max(parseInt(this.inputZoom.value)/100,t.MIN_PREVIEW_ZOOM)},t.prototype.getRenderer=function(){var t=this;return this.viewer.httpgd.getRenderers().find((function(e){return e.id==t.selectFormat.value}))},t.prototype.clickDownload=function(){var t=this.viewer.plotView.getCurrentPlotId();if(t){var e=this.getRenderer();r(this.viewer.httpgd.getPlotURL({width:this.getWidth(),height:this.getHeight(),zoom:this.getZoom(),id:t,renderer:e.id,download:"plot_"+t+e.ext}))}},t.prototype.clickOpen=function(){var t=this.viewer.plotView.getCurrentPlotId();if(t){var e=this.getRenderer();r(this.viewer.httpgd.getPlotURL({width:this.getWidth(),height:this.getHeight(),zoom:this.getZoom(),id:t,renderer:e.id}),null,!0)}},t.prototype.update=function(){if(!(c(this.inputWidth,!this.validWidth(),"invalid-input")||c(this.inputHeight,!this.validHeight(),"invalid-input")||c(this.inputZoom,!this.validZoom(),"invalid-input"))){var t=this.viewer.plotView.getCurrentPlotId();if(t){var e=this.viewer.httpgd.getPlotURL({width:this.getWidth(),height:this.getHeight(),zoom:this.getZoom(),id:t});this.imgPreview.src=e}else this.imgPreview.src=u}},t.prototype.show=function(){this.elemModal.style.display="block",this.update()},t.MIN_PREVIEW_SIZE=1,t.MAX_PREVIEW_SIZE=1e4,t.MIN_PREVIEW_ZOOM=.01,t.MAX_PREVIEW_ZOOM=1e4,t}(),f=function(){function t(t){this.viewer=t,this.overlayContainer=n("overlay"),this.overlayText=n("overlay-text")}return t.prototype.show=function(t){this.overlayText.innerText=t,this.overlayContainer.style.display="inline"},t.prototype.hide=function(){this.overlayContainer.style.display="none"},t.TEXT_CONNECTION_LOST="Connection lost.",t.TEXT_DEVICE_INACTIVE="Device inactive.",t}(),g=function(){function t(e){var i=this;this.viewer=e,this.dropdown=n("tb-more").parentElement,this.dropdown.onmouseenter=function(){return i.showDropdown()},this.dropdown.onmouseleave=function(){return i.hideDropdown()},this.zoomLabel=n("tb-zlvl"),this.pageLabel=n("tb-pnum"),this.elemToolbar=n("toolbar"),this.elemContainer=n("container"),this.timoutFade=setTimeout((function(){return i.fadeOut()}),t.DELAY_FADE_OUT),this.elemContainer.onmousemove=function(){i.elemToolbar.classList.remove("fade-out"),clearTimeout(i.timoutFade),i.timoutFade=setTimeout((function(){return i.fadeOut()}),t.DELAY_FADE_OUT)},this.elemContainer.onmouseleave=function(){return i.fadeOut()}}return t.prototype.registerActions=function(t){for(var e=this,i={},o=function(t){if(n(t.id).onclick=function(){t.f(),e.hideDropdown()},t.keys)for(var o=0,r=t.keys;o<r.length;o++){var s=r[o];i[s]=t}},r=0,s=t;r<s.length;r++)o(s[r]);window.addEventListener("keydown",(function(t){if(!e.viewer.exportView.isVisible()){var o=i[t.keyCode];return!o||o.altKey&&!t.altKey?void 0:(o.f(),void t.preventDefault())}}))},t.prototype.showDropdown=function(){this.dropdown.classList.add(t.CSS_SHOW_DROPDOWN)},t.prototype.hideDropdown=function(){this.dropdown.classList.remove(t.CSS_SHOW_DROPDOWN)},t.prototype.setZoomLabelText=function(t){this.zoomLabel.childNodes[0].nodeValue=t},t.prototype.setPageLabelText=function(t){this.pageLabel.childNodes[0].nodeValue=t},t.prototype.fadeOut=function(){this.elemToolbar.classList.add("fade-out")},t.DELAY_FADE_OUT=4e3,t.CSS_SHOW_DROPDOWN="drop-open",t}(),v=function(){function t(t){this.viewer=t,this.elemPlotView=n("plotview"),this.elemSidebar=n("sidebar")}return t.prototype.update=function(t){for(var e=this,i=0;i<this.elemSidebar.children.length;)i>=t.plots.length||this.elemSidebar.children[i].getAttribute("data-pid")!==t.plots[i].id?this.elemSidebar.removeChild(this.elemSidebar.children[i]):i++;for(var o=function(){var o=t.plots[i],r=document.createElement("div");r.setAttribute("data-pid",o.id);var s=document.createElement("a");s.innerHTML="&#10006;",s.onclick=function(){e.viewer.httpgd.removePlot({id:o.id}),e.viewer.httpgd.updatePlots()};var a=document.createElement("img");r.classList.add("history-item"),r.classList.add("history-item"),a.setAttribute("src",n.viewer.httpgd.getPlotURL({id:o.id})),r.onclick=function(){return e.viewer.plotView.setPage(o.id)},r.appendChild(a),r.appendChild(s),n.elemSidebar.appendChild(r)},n=this;i<t.plots.length;++i)o()},t.prototype.setSelected=function(t){for(var e,i=0;i<this.elemSidebar.children.length;++i){var o=this.elemSidebar.children[i];o.getAttribute("data-pid")===t?(o.classList.add("history-selected"),e=o):o.classList.remove("history-selected")}if(e){var n=e.getBoundingClientRect(),r=n.y+this.elemSidebar.scrollTop,s=n.height,a=this.elemSidebar.getBoundingClientRect().height;console.log({y_card:r,h_sidebar:a});var h=r-(a/2-s/2);console.log(h),this.elemSidebar.scrollTo({top:h,behavior:"smooth"})}},t.prototype.toggle=function(){var t=this;this.elemSidebar.classList.toggle("nohist"),this.elemPlotView.classList.toggle("nohist"),setTimeout((function(){return t.viewer.plotView.update()}),300)},t.prototype.hideWithoutAnimation=function(){var t=this;this.elemSidebar.classList.add("notransition","nohist"),this.elemPlotView.classList.add("notransition","nohist"),this.viewer.plotView.update(),setTimeout((function(){t.elemSidebar.classList.remove("notransition"),t.elemPlotView.classList.remove("notransition")}),300)},t}(),m=function(){function t(e){var i=this;this.resizeBlocked=!1,this.scale=t.SCALE_DEFAULT,this.page=1,this.viewer=e,this.toolbar=new g(e),this.sidebar=new v(e),this.image=n("drawing"),this.image.src=u,window.addEventListener("resize",(function(){return i.resize()}))}return t.prototype.updatePlots=function(t){this.plots=t,this.updatePageLabel(),this.sidebar.update(t),this.page=this.plots.plots.length},t.prototype.getCurrentPlotId=function(){if(!this.plots)return null;for(;this.page<1;)this.page+=this.plots.plots.length;for(;this.page>this.plots.plots.length;)this.page-=this.plots.plots.length;return this.plots.plots[this.page-1].id},t.prototype.update=function(){if(this.plots){var t=this.getCurrentPlotId(),e=this.image.getBoundingClientRect(),i=this.viewer.httpgd.getPlotURL({id:t,width:e.width,height:e.height,zoom:this.scale});this.image.src=i,this.updatePageLabel(),this.sidebar.setSelected(t)}else this.image.src=u},t.prototype.resize=function(){var e=this;this.resizeBlocked||(this.resizeBlocked=!0,setTimeout((function(){e.update(),e.resizeBlocked=!1}),t.COOLDOWN_RESIZE))},t.prototype.zoomOut=function(){this.scale-t.SCALE_STEP>t.SCALE_MIN&&(this.scale-=t.SCALE_STEP),this.updateZoomLabel(),this.resize()},t.prototype.zoomIn=function(){this.scale+=t.SCALE_STEP,this.updateZoomLabel(),this.resize()},t.prototype.zoomReset=function(){this.scale=t.SCALE_DEFAULT,this.updateZoomLabel(),this.resize()},t.prototype.getZoomString=function(){return Math.ceil(this.scale/t.SCALE_DEFAULT*100)+"%"},t.prototype.updateZoomLabel=function(){this.toolbar.setZoomLabelText(this.getZoomString())},t.prototype.nextPage=function(){this.page++,this.update()},t.prototype.prevPage=function(){this.page--,this.update()},t.prototype.newestPage=function(){this.plots&&this.page!=this.plots.plots.length&&(this.page=this.plots.plots.length,this.update())},t.prototype.setPage=function(t){if(this.plots)for(var e=0;e<this.plots.plots.length;++e)if(this.plots.plots[e].id===t)return this.page=e+1,void this.update()},t.prototype.getPageString=function(){return this.plots?this.page+"/"+this.plots.plots.length:"0/0"},t.prototype.updatePageLabel=function(){this.toolbar.setPageLabelText(this.getPageString())},t.prototype.downloadSVG=function(){var t;t=this.image,fetch(t.src).then((function(t){return t.blob()})).then((function(t){r(URL.createObjectURL(t),"plot.svg")}))},t.prototype.downloadPNG=function(){var t;t=this.image,s(t,(function(t){r(t.toDataURL("image/png").replace("image/png","image/octet-stream"),"plot.png")}))},t.prototype.copyPNG=function(){var t;t=this.image,navigator.clipboard&&s(t,(function(t){t.toBlob((function(t){var e,i;t&&(null===(i=(e=navigator.clipboard).write)||void 0===i||i.call(e,[new ClipboardItem({"image/png":t})]))}))}))},t.prototype.removePlot=function(){this.viewer.httpgd.removePlot({id:this.getCurrentPlotId()})},t.prototype.clearPlots=function(){this.viewer.httpgd.clearPlots()},t.COOLDOWN_RESIZE=200,t.SCALE_DEFAULT=1.25,t.SCALE_STEP=t.SCALE_DEFAULT/12,t.SCALE_MIN=.5,t}(),w=function(){function t(t,e,i){var o=this;this.httpgd=new d(t,e,i),this.httpgd.onPlotsChanged((function(t){return o.plotsChanged(t)})),this.httpgd.onConnectionChange((function(t){return o.connectionChanged(t)})),this.httpgd.onDeviceActiveChanged((function(t){return o.deviceActiveChanged(t)}))}return t.prototype.plotsChanged=function(t){var e,i;null===(e=this.plotView)||void 0===e||e.updatePlots(t),null===(i=this.plotView)||void 0===i||i.update()},t.prototype.connectionChanged=function(t){var e,i;t?null===(e=this.overlayView)||void 0===e||e.show(f.TEXT_CONNECTION_LOST):null===(i=this.overlayView)||void 0===i||i.hide()},t.prototype.deviceActiveChanged=function(e){var i,o=this;this.deviceInactiveDelayed&&clearTimeout(this.deviceInactiveDelayed),e?null===(i=this.overlayView)||void 0===i||i.hide():this.deviceInactiveDelayed=setTimeout((function(){var t;return null===(t=o.overlayView)||void 0===t?void 0:t.show(f.TEXT_DEVICE_INACTIVE)}),t.COOLDOWN_DEVICE_INACTIVE)},t.prototype.init=function(){var t=this;this.plotView=new m(this),this.overlayView=new f(this),this.exportView=new p(this),this.httpgd.connect().then((function(){t.exportView.initRenderers()})),this.plotView.toolbar.registerActions([{keys:[37,40],f:function(){return t.plotView.prevPage()},id:"tb-left"},{keys:[39,38],f:function(){return t.plotView.nextPage()},id:"tb-right"},{keys:[78],f:function(){return t.plotView.newestPage()},id:"tb-pnum"},{keys:[187],f:function(){return t.plotView.zoomIn()},id:"tb-plus"},{keys:[189],f:function(){return t.plotView.zoomOut()},id:"tb-minus"},{keys:[48],f:function(){return t.plotView.zoomReset()},id:"tb-zlvl"},{id:"tb-clear",altKey:!0,keys:[68],f:function(){return t.plotView.clearPlots()}},{id:"tb-remove",keys:[46,68],f:function(){return t.plotView.removePlot()}},{id:"tb-save-svg",keys:[83],f:function(){return t.plotView.downloadSVG()}},{id:"tb-save-png",keys:[80],f:function(){return t.plotView.downloadPNG()}},{id:"tb-copy-png",keys:[67],f:function(){return t.plotView.copyPNG()}},{id:"tb-history",keys:[72],f:function(){return t.plotView.sidebar.toggle()}},{id:"tb-export",keys:[69],f:function(){return t.exportView.show()}}])},t.COOLDOWN_DEVICE_INACTIVE=1e3,t}(),y=new URL(window.location.href).searchParams;const b={viewer:new w(y.get("host")||window.location.host,y.get("token")||void 0,!y.has("ws")||"0"!=y.get("ws"))};window.onload=function(){b.viewer.init()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,